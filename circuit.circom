pragma circom 2.0.0;

template MiMC5() {
    signal input x;
    signal input k;
    signal output h;

    var nRounds = 10;

    var c[nRounds] = [
        0,
        37687659829957300372198967772721067328531572190411988163877648911468998362384,
        106975534816242949434986365031482802563390618842212557894873756031741344354399,
        62891455389696918132768800910624083306173878425313281634486752555724039361396,
        5211254994977189128068839812545693930189157208720327236063835235444789223504,
        57001070451412694415823885468770940556191482134336948684258481928333790878676,
        40764556525306313348737443291387303801156472525503111640776167870509656458675,
        32821371530250192526560906138181139858153663113542705615005935671670232044249,
        28602421302443991030534121118356828018039620393440445729962569931036536374942,
        87074520513835390725626994413777416746386170424523391192970966912837762110425
    ];

    signal lastOutput[nRounds + 1];
    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutput[0] <== x;

    for(var i = 0; i < nRounds; i++){
        base[i] = lastOutput[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutput[i + 1] <== base4[i] * base[i];
    }

    h <== lastOutput[nRounds] + k;
}

component main = MiMC5();